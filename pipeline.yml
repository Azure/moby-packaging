parameters:
  - name: package_name
    displayName: package_name
    type: string
    default: ""
  - name: tag
    displayName: tag
    type: string
    default: ""
  - name: revision
    displayName: revision
    type: string
    default: ""
  - name: specs
    displayName: Package Specs
    type: object
    default: []
  - name: build_id
    displayName: build id
    type: string
    default: "__not_supplied"

name: ${{ replace(parameters.build_id, '__not_supplied', '$(Date:yyyyMMdd).$(Rev:r)') }}-${{ parameters.package_name }}-${{ parameters.tag }}-${{ parameters.revision }}.run$(Rev:r)


variables:
  amd.pool: staging-pool-amd64-mariner-2
  package.name: "${{ parameters.package_name }}"

stages:
  - stage: Validate
    jobs:
      - job: ValidateDataFormat
        pool: $(amd.pool)
        timeoutInMinutes: 5
        steps:
          - bash: |
              set -exu

              specs_file="$(mktemp)"

              cat > "$specs_file" <<EOF
              ${{ convertToJson(parameters.specs) }}
              EOF

              cat "$specs_file"
              go run ./cmd/validate/ "$PACKAGE_NAME" < "$specs_file"
            displayName: Validate Input Data Format
  - stage: Build
    jobs:
      - ${{ each spec in parameters.specs }}:
        - job: "Build_\
                  ${{ replace(spec.package, '-', '_') }}_\
                  ${{ spec.distro }}_\
                  ${{ replace(spec.arch, '/', '') }}_\
                  ${{ replace(spec.tag, '.', '_') }}"
          variables:
            bundle.dir: "$(Pipeline.Workspace)/bundles"
            ${{ if contains(spec.arch, 'arm') }}:
              build.pool: staging-pool-arm64-mariner-2
            ${{ else }}:
              build.pool: staging-pool-amd64-mariner-2
          pool: $(build.pool)
          timeoutInMinutes: 240
          steps:
            - bash: |
                os=linux

                if [ "$DISTRO" = "windows" ]; then
                  os=windows
                fi

                echo "##vso[task.setvariable variable=pkg.os]$os"
              name: determineOS
              displayName: Determine OS
              env:
                DISTRO: ${{ spec.distro }}
            - bash: |
                set -exu

                install -D /dev/null "$SPEC_FILE"

                cat > "$SPEC_FILE" <<EOF
                ${{ convertToJson(spec) }}
                EOF

                cat "$SPEC_FILE"
                go run . --build-spec="$SPEC_FILE" --output="$BUNDLE_DIR"

                echo "##vso[task.setvariable variable=spec.file;isoutput=true]$SPEC_FILE"
                readarray -d '' artifacts < <(find "$BUNDLE_DIR" -type f -regextype posix-egrep -regex '.*\.(rpm|deb|zip)$' -print0)

                if [ ${#artifacts[@]} -ne 1 ]; then
                  printf "##vso[task.complete result=Failed;]%s\n" "somehow, no artifact was generated (or too many)"
                  exit 1
                fi

                artifact_pattern="bundles/${artifacts[0]#"${BUNDLE_DIR}/"}"
                echo "##vso[task.setvariable variable=artifact.pattern;isoutput=true]$artifact_pattern"

                spec_pattern="bundles/${SPEC_FILE#"${BUNDLE_DIR}/"}"
                echo "##vso[task.setvariable variable=spec.pattern;isoutput=true]$spec_pattern"
              name: buildPackage
              displayName: Build package
              env:
                SPEC_FILE: "$(bundle.dir)/${{ spec.distro }}/$(pkg.os)_${{ replace(spec.arch, '/', '') }}/${{ spec.package }}-${{ spec.distro }}-${{ replace(spec.arch, '/', '') }}-spec.json"
            - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
              displayName: Generate SBOM
              inputs:
                BuildDropPath: $(Pipeline.Workspace)/bundles/${{ parameters.distro }}
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: "$(Pipeline.Workspace)/bundles"
                artifactName: bundles
  - stage: Test
    dependsOn: ["Build"]
    jobs:
      - ${{ each spec in parameters.specs }}:
        - job: "Test_\
                  ${{ replace(spec.package, '-', '_') }}_\
                  ${{ spec.distro }}_\
                  ${{ replace(spec.arch, '/', '') }}_\
                  ${{ replace(spec.tag, '.', '_') }}"
          # dependsOn:
          #   - "Build_\
          #         ${{ replace(spec.package, '-', '_') }}_\
          #         ${{ spec.distro }}_\
          #         ${{ replace(spec.arch, '/', '') }}_\
          #         ${{ replace(spec.tag, '.', '_') }}"
          condition: ne('${{ spec.distro }}', 'windows')
          pool: $(build.pool)
          variables:
            bundle.dir: "$(Pipeline.Workspace)/bundles"
            artifact.pattern: "$[ stageDependencies.Build.Build_\
                                 ${{ replace(spec.package, '-', '_') }}_\
                                 ${{ spec.distro }}_${{ replace(spec.arch, '/', '') }}_\
                                 ${{ replace(spec.tag, '.', '_') }}.\
                                 outputs['buildPackage.artifact.pattern'] ]"
            spec.pattern: "$[ stageDependencies.Build.Build_\
                             ${{ replace(spec.package, '-', '_') }}_\
                             ${{ spec.distro }}_\
                             ${{ replace(spec.arch, '/', '') }}_\
                             ${{ replace(spec.tag, '.', '_') }}.\
                             outputs['buildPackage.spec.pattern'] ]"
            spec.file: "$[ stageDependencies.Build.Build_\
                          ${{ replace(spec.package, '-', '_') }}_\
                          ${{ spec.distro }}_\
                          ${{ replace(spec.arch, '/', '') }}_\
                          ${{ replace(spec.tag, '.', '_') }}\
                          .outputs['buildPackage.spec.file'] ]"
            ${{ if contains(spec.arch, 'arm') }}:
              build.pool: staging-pool-arm64-mariner-2
            ${{ else }}:
              build.pool: staging-pool-amd64-mariner-2
          steps:
            - download: current
              artifact: bundles
              patterns: "$(spec.pattern)"
            - download: current
              artifact: bundles
              patterns: "$(artifact.pattern)"
            - script: |
                set -exu

                timeout_in_seconds=15
                secs=0
                t1="$(date +%s)"

                while ! [ -f "$SPEC_FILE" ]; do
                  sleep 1
                  t2="$(date +%s)"
                  secs=$((t2-t1))

                  if [ "$secs" -gt "$timeout_in_seconds" ]; then
                    printf '##vso[task.logissue type=error;]file "%s" never found, exiting' "$SPEC_FILE"
                    exit 1
                  fi
                done

                # runs the tests
                go run ./cmd/run_tests "$SPEC_FILE" "$BUNDLE_DIR"
              displayName: Integration Test
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: "$(Pipeline.Workspace)/bundles"
                artifactName: bundles
            - task: PublishBuildArtifacts@1
              condition: always()
              inputs:
                pathToPublish: "tests/.test"
                artifactName: testresults
  - stage: SignAndPublish
    dependsOn: ["Test"]
    jobs:
      - job: Sign_Packages
        pool: production-pool-amd64-mariner-2
        steps:
          - download: current
            artifact: bundles
          - bash: |
              cp -r $(Pipeline.Workspace)/bundles $(Pipeline.Workspace)/signed
            displayName: Copy downloaded files to sign
          - bash: |
              set -exu

              win_dir="${SIGNED_DIR}/windows"
              linux_dir="${SIGNED_DIR}/linux"

              mkdir -p "$win_dir" "$linux_dir"
              find "$SIGNED_DIR" -maxdepth 1 -type f -name "*.zip" -exec mv {} "$win_dir" \;
              find "$SIGNED_DIR" -maxdepth 1 -type f -not -name "*.zip" -exec mv {} "$linux_dir" \;
            displayName: Separate windows and linux artifacts
            env:
              SIGNED_DIR: "$(Pipeline.Workspace)/signed"
          - task: UseDotNet@2
            displayName: Install .NET Core SDK
            inputs:
              packageType: sdk
              version: 2.2.207
          - template: templates/sign.steps.yml
            parameters:
              rootDir: "$(Pipeline.Workspace)/signed"
          - bash: |
              set -exu

              win_dir="${SIGNED_DIR}/windows"
              linux_dir="${SIGNED_DIR}/linux"

              rm -rf "${SIGNED_DIR}/extracted"
              find "$SIGNED_DIR" -type f -exec mv {} "$SIGNED_DIR" \;
              rm -rf "$win_dir" "$linux_dir"
            displayName: Combine windows and linux artifacts
            env:
              SIGNED_DIR: "$(Pipeline.Workspace)/signed"
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "$(Pipeline.Workspace)/signed"
              artifactName: signed
      # - job: Upload_Packages
      #   dependsOn: ["Sign_Packages"]
      #   pool: production-pool-amd64-mariner-2
      #   steps:
      #     - download: current
      #       artifact: signed
      #     - bash: |
      #         set -euo pipefail

      #         # uploads signed files to prod bucket, removes unsigned / failed uploads, writes output to stdout
      #         go run ./cmd/pop upload \
      #           --signed-dir="$SIGNED_DIR" \
      #           --messages-file="${MSG_DIR}/downloaded" |
      #           tee "${MSG_DIR}/succeeded"
      #       env:
      #         SIGNED_DIR: "$(Pipeline.Workspace)/signed"
      #         MSG_DIR: "$(Pipeline.Workspace)/messages"
      #       displayName: Upload Signed Packages to Prod Storage
      #       name: uploadPackages
      #     - bash: |
      #         readarray -t failed < <(jq -r '.[] | .content | @base64d | fromjson.artifact.name' < "${MSG_DIR}/failed_singing_or_publishing")
      #         for f in "${failed[@]}"; do
      #           printf '##vso[task.logissue type=error;]failed signing or uploading:  %s\n' "$f"
      #         done
      #       env:
      #         MSG_DIR: "$(Pipeline.Workspace)/messages"
      #       displayName: Surface failed uploads
      # - job: Update_Latest
      #   dependsOn: ["Sign_Packages", "Upload_Packages"]
      #   pool: production-pool-amd64-mariner-2
      #   steps:
      #     - checkout: self
      #     - bash: az login --identity
      #       displayName: Login to Azure
      #     - bash: scripts/generate-versions.sh
      #       displayName: Generate versions
      #       env:
      #         AZURE_STORAGE_ACCOUNT: ${{ parameters.prod_storage_account_name }}
      #         STORAGE_CONTAINER: moby
      #         OUTPUT: $(Build.ArtifactStagingDirectory)
      #     - task: PublishBuildArtifacts@1
      #       displayName: Store pipeline artifacts
      #       inputs:
      #         artifactName: versions
      #     - bash: |
      #         set -ex

      #         az storage container create -n "${STORAGE_CONTAINER}" --auth-mode=login --public-access=blob

      #         az storage blob upload-batch \
      #           --max-connections=10 --auth-mode=login \
      #           --overwrite \
      #           --source "${BUILD_ARTIFACTSTAGINGDIRECTORY}/" \
      #           --destination "${STORAGE_CONTAINER}" \
      #           --destination-path "/" \
      #           --pattern "*.json" \
      #           --content-type "application/json"

      #         az storage blob upload-batch \
      #           --max-connections=10 --auth-mode=login \
      #           --overwrite \
      #           --source "${BUILD_ARTIFACTSTAGINGDIRECTORY}/" \
      #           --destination "${STORAGE_CONTAINER}" \
      #           --destination-path "/" \
      #           --pattern "*.rss" \
      #           --content-type "application/rss+xml"

      #         az storage blob upload-batch \
      #           --max-connections=10 --auth-mode=login \
      #           --overwrite \
      #           --source "${BUILD_ARTIFACTSTAGINGDIRECTORY}/" \
      #           --destination "${STORAGE_CONTAINER}" \
      #           --destination-path "/" \
      #           --pattern "**/latest/*" \
      #           --content-type "text/plain"
      #       displayName: Upload versions to blob storage
      #       env:
      #         AZURE_STORAGE_ACCOUNT: ${{ parameters.prod_storage_account_name }}
      #         STORAGE_CONTAINER: ${{ parameters.index_container }}
