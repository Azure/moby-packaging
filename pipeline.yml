parameters:
  - name: package_name
    displayName: package_name
    type: string
    default: ""
  - name: tag
    displayName: tag
    type: string
    default: ""
  - name: revision
    displayName: revision
    type: string
    default: ""
  - name: specs
    displayName: Package Specs
    type: object
    default: []
  - name: build_id
    displayName: build id
    type: string
    default: "__not_supplied"

name: ${{ replace(parameters.build_id, '__not_supplied', '$(Date:yyyyMMdd).$(Rev:r)') }}-${{ parameters.package_name }}-${{ parameters.tag }}-${{ parameters.revision }}.$(Rev:r)


variables:
  amd.pool: staging-pool-amd64-mariner-2
  package.name: "${{ parameters.package_name }}"

stages:
  - stage: Validate
    jobs:
      - job: ValidateDataFormat
        pool: $(amd.pool)
        timeoutInMinutes: 5
        steps:
          - bash: |
              set -exu

              specs_file="$(mktemp)"

              cat > "$specs_file" <<EOF
              ${{ convertToJson(parameters.specs) }}
              EOF

              cat "$specs_file"
              go run ./cmd/validate/ "$PACKAGE_NAME" < "$specs_file"
            displayName: Validate Input Data Format
  - stage: Build
    jobs:
      - ${{ each spec in parameters.specs }}:
        - job: "Build_\
                  ${{ replace(spec.package, '-', '_') }}_\
                  ${{ spec.distro }}_\
                  ${{ replace(spec.arch, '/', '') }}_\
                  ${{ replace(spec.tag, '.', '_') }}"
          variables:
            bundle.dir: "$(Pipeline.Workspace)/bundles"
            ${{ if contains(spec.arch, 'arm') }}:
              build.pool: staging-pool-arm64-mariner-2
            ${{ else }}:
              build.pool: staging-pool-amd64-mariner-2
          pool: $(build.pool)
          timeoutInMinutes: 240
          steps:
            - bash: |
                os=linux

                if [ "$DISTRO" = "windows" ]; then
                  os=windows
                fi

                echo "##vso[task.setvariable variable=pkg.os]$os"
              name: determineOS
              displayName: Determine OS
              env:
                DISTRO: ${{ spec.distro }}
            - bash: |
                set -exu

                install -D /dev/null "$SPEC_FILE"

                cat > "$SPEC_FILE" <<EOF
                ${{ convertToJson(spec) }}
                EOF

                cat "$SPEC_FILE"
                go run . --build-spec="$SPEC_FILE" --output="$BUNDLE_DIR"

                echo "##vso[task.setvariable variable=spec.file;isoutput=true]$SPEC_FILE"
                readarray -d '' artifacts < <(find "$BUNDLE_DIR" -type f -regextype posix-egrep -regex '.*\.(rpm|deb|zip)$' -print0)

                if [ ${#artifacts[@]} -ne 1 ]; then
                  printf "##vso[task.complete result=Failed;]%s\n" "somehow, no artifact was generated (or too many)"
                  exit 1
                fi

                artifact_pattern="${artifacts[0]#"${BUNDLE_DIR}/"}"
                echo "##vso[task.setvariable variable=artifact.pattern;isoutput=true]$artifact_pattern"

                spec_pattern="${SPEC_FILE#"${BUNDLE_DIR}/"}"
                echo "##vso[task.setvariable variable=spec.pattern;isoutput=true]$spec_pattern"
              name: buildPackage
              displayName: Build package
              env: 
                SPEC_FILE: "$(bundle.dir)/${{ spec.distro }}/$(pkg.os)_${{ replace(spec.arch, '/', '') }}/${{ spec.package }}-${{ spec.distro }}-${{ replace(spec.arch, '/', '') }}-spec.json"
            - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
              displayName: Generate SBOM
              inputs:
                BuildDropPath: $(Pipeline.Workspace)/bundles/${{ parameters.distro }}
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: "$(Pipeline.Workspace)/bundles"
                artifactName: bundles
  - stage: TestAndSBOM
    dependsOn: ["Build"]
    jobs:
      - ${{ each spec in parameters.specs }}:
        - job: "Test_\
                ${{ replace(spec.package, '-', '_') }}_\
                ${{ spec.distro }}_\
                ${{ replace(spec.arch, '/', '') }}_\
                ${{ replace(spec.tag, '.', '_') }}"
          condition: ne('${{ spec.distro }}', 'windows')
          pool: $(build.pool)
          variables:
            stage.id: 
            bundle.dir: "$(Pipeline.Workspace)/bundles"
            artifact.pattern: "$[ stageDependencies.Build.Build_\
                                 ${{ replace(spec.package, '-', '_') }}_\
                                 ${{ spec.distro }}_${{ replace(spec.arch, '/', '') }}_\
                                 ${{ replace(spec.tag, '.', '_') }}.\
                                 outputs['buildPackage.artifact.pattern'] ]"
            spec.pattern: "$[ stageDependencies.Build.Build_\
                             ${{ replace(spec.package, '-', '_') }}_\
                             ${{ spec.distro }}_\
                             ${{ replace(spec.arch, '/', '') }}_\
                             ${{ replace(spec.tag, '.', '_') }}.\
                             outputs['buildPackage.spec.pattern'] ]"
            spec.file: "$[ stageDependencies.Build.Build_\
                          ${{ replace(spec.package, '-', '_') }}_\
                          ${{ spec.distro }}_\
                          ${{ replace(spec.arch, '/', '') }}_\
                          ${{ replace(spec.tag, '.', '_') }}\
                          .outputs['buildPackage.spec.file'] ]"
            ${{ if contains(spec.arch, 'arm') }}:
              build.pool: staging-pool-arm64-mariner-2
            ${{ else }}:
              build.pool: staging-pool-amd64-mariner-2
          steps:
            - download: current
              artifact: bundles
              patterns: "$(artifact.pattern)"
            - download: current
              artifact: bundles
              patterns: "$(spec.pattern)"
            - script: |
                set -exu

                declare -A os
                os=(
                    [bookworm]=debian
                    [bullseye]=debian
                    [buster]=debian
                    [focal]=ubuntu
                    [jammy]=ubuntu
                    [rhel9]=el9
                    [rhel8]=el8
                    [centos7]=el7
                    [mariner2]=cm2
                )

                declare -A versions
                versions=(
                    [bookworm]=12
                    [bullseye]=11
                    [buster]=10
                    [focal]=20.04
                    [jammy]=22.04
                    [rhel9]=el9
                    [rhel8]=el8
                    [centos7]=el7
                    [mariner2]=cm2
                )

                # the bundles directory from the previous stage will be in $(Pipeline.Workspace)/bundles
                bundle_dir="$(Pipeline.Workspace)/bundles"

                if ! [ -f "$SPEC_FILE" ]; then
                  printf "##vso[task.complete result=Failed;]%s\n" "spec file not found: $SPEC_FILE"
                  exit 1
                fi

                commit="$(jq -r '.commit' < "$SPEC_FILE")"
                tag="$(jq -r '.tag' < "$SPEC_FILE")"
                revision="$(jq -r '.revision' < "$SPEC_FILE")"
                distro="$(jq -r '.distro' < "$SPEC_FILE")"
                pkgos="${os[$distro]}"
                pkgver="${versions[$distro]}"

                package="$(jq -r .package < "$SPEC_FILE")"
                package="${package#moby-}"
                package="${package^^}"
                package="${package//-/_}"

                export DISTRO="$distro"
                export TARGETARCH="${{ spec.arch }}"
                export INCLUDE_TESTING=0
                export "TEST_${package}_COMMIT=$commit"
                export "TEST_${package}_VERSION=${tag}-${revision}"
                export "TEST_${package}_PACKAGE_VERSION=${tag}-${revision}.${pkgver}"

                if [ "$pkgos" = debian ] || [ "$pkgos" = ubuntu ]; then
                  export "TEST_${package}_PACKAGE_VERSION=${tag}-${pkgos}${pkgver}u${revision}"
                fi

                make test OUTPUT="$BUNDLE_DIR"
              displayName: Integration Test
            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: "$(Pipeline.Workspace)/bundles"
                artifactName: bundles
            - task: PublishBuildArtifacts@1
              condition: always()
              inputs:
                pathToPublish: "tests/.test"
                artifactName: testresults
  # - stage: PublishStaging
  #   dependsOn: ["TestAndSBOM"]
  #   condition: succeeded()
  #   jobs:
  #     - job: PublishStaging
  #       pool: $(build.pool)
  #       workspace:
  #         clean: all
  #       variables:
  #         - name: storage.account.name
  #           value: moby
  #         - name: storage.account.container
  #           value: moby
  #       steps:
  #         - download: current
  #           artifact: packages
  #         - script: |
  #             set -exu
  #             : ${BLOB_PREFIX:=/}

  #             go run ./cmd/push \
  #               --artifact-dir="$ARTIFACTS_DIR" \
  #               --package-name="$PACKAGE_NAME" \
  #               --build-id="${{ parameters.build_id }}"
  #           env:
  #             ARTIFACTS_DIR: $(Pipeline.Workspace)/packages
  #             PACKAGE_NAME: "${{ parameters.package_name }}"
  #           displayName: Upload to Staging, Queue Signing Job
